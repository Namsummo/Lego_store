"use client";

import React, { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Separator } from "@/components/ui/separator";
import { useThongTinNguoiNhan } from "@/hooks/useThongTinTaiKhoan";
import { useUserStore } from "@/context/authStore.store";
import { toast } from "sonner";
import { accountService } from "@/services/accountService";
import { format, parse } from "date-fns";
import {
  AlertDialog,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogAction,
  AlertDialogCancel,
} from "@/components/ui/alert-dialog";
import { User, Phone, Mail, Calendar, MapPin, Edit2 } from "lucide-react";

export default function ProFile() {
  const [isEditingPersonal, setIsEditingPersonal] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [showConfirmDialog, setShowConfirmDialog] = useState(false);
  const [pendingFormData, setPendingFormData] = useState<any>(null);
  const [errors, setErrors] = useState<{
    sdt?: string;
    ngaySinh?: string;
    duong?: string;
    xa?: string;
    thanhPho?: string;
  }>({});

  // L·∫•y user t·ª´ auth store
  const { user, updateUser } = useUserStore();
  const currentUserId = user?.id;

  // L·∫•y ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh
  const { data: thongTinList = [] } = useThongTinNguoiNhan(currentUserId || 0);
  const defaultAddress = thongTinList.find((item) => item.isMacDinh === true);

  // State cho ƒë·ªãa ch·ªâ
  const [provinces, setProvinces] = useState<any[]>([]);
  const [wards, setWards] = useState<any[]>([]);
  const [allWards, setAllWards] = useState<any>({});
  const [selectedProvince, setSelectedProvince] = useState("");
  const [selectedWard, setSelectedWard] = useState("");

  // Form data cho th√¥ng tin c√° nh√¢n
  const [personalData, setPersonalData] = useState({
    ten: user?.ten || "",
    email: user?.email || "",
    sdt: user?.sdt || "",
    ngaySinh: user?.ngaySinh,
    duong: defaultAddress?.duong || "",
    xa: defaultAddress?.xa || "",
    thanhPho: defaultAddress?.thanhPho || "",
  });

  // Fetch danh s√°ch t·ªânh v√† x√£/ph∆∞·ªùng t·ª´ public/data
  useEffect(() => {
    fetch("/data/province.json")
      .then((res) => res.json())
      .then((provinceData) => {
        fetch("/data/ward.json")
          .then((res) => res.json())
          .then((wardData) => {
            setAllWards(wardData);
            const parentCodes = new Set();
            Object.values(wardData as Record<string, any>).forEach((w: any) => {
              if (w.parent_code) parentCodes.add(w.parent_code);
            });
            const filteredProvinces = Object.entries(provinceData as Record<string, any>)
              .filter(([code]) => parentCodes.has(code))
              .map(([code, info]) => ({
                code,
                ...info,
              }));
            setProvinces(filteredProvinces);
          });
      });
  }, []);

  // Khi ch·ªçn t·ªânh, c·∫≠p nh·∫≠t danh s√°ch x√£/ph∆∞·ªùng
  useEffect(() => {
    if (selectedProvince) {
      const wardsArr = Object.entries(allWards as Record<string, any>)
        .filter(([_, info]) => (info as any).parent_code === selectedProvince)
        .map(([code, info]) => ({ code, ...(info as any) }));
      setWards(wardsArr);
    } else {
      setWards([]);
    }
    setSelectedWard("");
    setErrors((prev) => ({ ...prev, xa: selectedProvince ? "" : "Vui l√≤ng ch·ªçn t·ªânh/th√†nh ph·ªë tr∆∞·ªõc" }));
  }, [selectedProvince, allWards]);

  // C·∫≠p nh·∫≠t personalData khi ch·ªçn t·ªânh/x√£
  useEffect(() => {
    const selectedProvinceData = provinces.find((p) => p.code === selectedProvince);
    const selectedWardData = wards.find((w) => w.code === selectedWard);

    setPersonalData((prev) => ({
      ...prev,
      thanhPho: selectedProvinceData?.name || "",
      xa: selectedWardData?.name || "",
    }));
    setErrors((prev) => ({
      ...prev,
      thanhPho: selectedProvinceData ? "" : "Vui l√≤ng ch·ªçn t·ªânh/th√†nh ph·ªë",
      xa: selectedWardData ? "" : selectedProvince ? "Vui l√≤ng ch·ªçn x√£/ph∆∞·ªùng" : prev.xa,
    }));
  }, [selectedProvince, selectedWard, provinces, wards]);

  // C·∫≠p nh·∫≠t personalData khi user ho·∫∑c defaultAddress thay ƒë·ªïi
  useEffect(() => {
    if (user) {
      const parsedDate = user.ngaySinh
        ? (() => {
          try {
            let parsed;
            if (typeof user.ngaySinh === "string") {
              parsed = parse(user.ngaySinh, "dd-MM-yyyy", new Date());
              if (isNaN(parsed.getTime())) {
                parsed = new Date(user.ngaySinh);
              }
            } else {
              parsed = new Date(user.ngaySinh);
            }
            return isNaN(parsed.getTime()) ? undefined : parsed;
          } catch {
            return undefined;
          }
        })()
        : undefined;

      setPersonalData({
        ten: user.ten || "",
        email: user.email || "",
        sdt: user.sdt || "",
        ngaySinh: parsedDate,
        duong: defaultAddress?.duong || "",
        xa: defaultAddress?.xa || "",
        thanhPho: defaultAddress?.thanhPho || "",
      });

      // ƒê·∫∑t gi√° tr·ªã select khi c√≥ defaultAddress
      if (defaultAddress && provinces.length > 0) {
        const province = provinces.find((p) => p.name === defaultAddress.thanhPho);
        if (province) {
          setSelectedProvince(province.code);
          setTimeout(() => {
            const wardsArr = Object.entries(allWards as Record<string, any>)
              .filter(([_, info]) => (info as any).parent_code === province.code)
              .map(([code, info]) => ({ code, ...(info as any) }));
            const ward = wardsArr.find((w) => w.name === defaultAddress.xa);
            if (ward) {
              setSelectedWard(ward.code);
            }
          }, 100);
        }
      }
    }
  }, [user, defaultAddress, provinces, allWards]);

  const validatePhone = (value: string) => {
    if (!value.trim()) return "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i";
    const phoneRegex = /^0[0-9]{9}$/;
    if (!phoneRegex.test(value)) return "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p 10 ch·ªØ s·ªë, b·∫Øt ƒë·∫ßu b·∫±ng 0 (v√≠ d·ª•: 0123456789)";
    return "";
  };

  const validateDate = (date: Date | undefined) => {
    if (!date) return "Vui l√≤ng ch·ªçn ng√†y sinh";
    const now = new Date("2025-07-29T23:26:00+07:00"); // 11:26 PM +07, 29/07/2025
    if (new Date(date) >= now) return "Ng√†y sinh kh√¥ng ƒë∆∞·ª£c l·ªõn h∆°n ho·∫∑c b·∫±ng ng√†y hi·ªán t·∫°i (29/07/2025 11:26 PM)";
    return "";
  };

  const validateAddress = (value: string, field: string) => {
    if (!value.trim()) return `Vui l√≤ng nh·∫≠p ${field}`;
    return "";
  };

  const handlePersonalSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    console.log("Form submitted with data:", personalData);

    const sdtError = validatePhone(personalData.sdt);
    const ngaySinhError = validateDate(personalData.ngaySinh);
    const duongError = validateAddress(personalData.duong, "ƒë·ªãa ch·ªâ");
    const xaError = validateAddress(personalData.xa, "x√£/ph∆∞·ªùng");
    const thanhPhoError = validateAddress(personalData.thanhPho, "t·ªânh/th√†nh ph·ªë");

    const newErrors = {
      sdt: sdtError,
      ngaySinh: ngaySinhError,
      duong: duongError,
      xa: xaError,
      thanhPho: thanhPhoError,
    };

    if (!currentUserId) {
      toast.error("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán ch·ª©c nƒÉng n√†y");
      return;
    }

    if (!personalData.ten.trim()) {
      toast.error("Vui l√≤ng nh·∫≠p h·ªç v√† t√™n");
      return;
    }

    if (Object.values(newErrors).some((error) => error)) {
      setErrors(newErrors);
      return;
    }

    setErrors({});

    const formData = {
      ten: personalData.ten,
      sdt: personalData.sdt,
      ngaySinh: personalData.ngaySinh && !isNaN(new Date(personalData.ngaySinh).getTime())
        ? format(new Date(personalData.ngaySinh), "dd-MM-yyyy")
        : "",
      duong: personalData.duong,
      xa: personalData.xa,
      thanhPho: personalData.thanhPho,
    };

    console.log("Form data prepared for confirmation:", formData);
    setPendingFormData(formData);
    setShowConfirmDialog(true);
  };

  const handleConfirmUpdate = async () => {
    if (!pendingFormData || !currentUserId) {
      toast.error("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá, vui l√≤ng th·ª≠ l·∫°i");
      return;
    }

    setIsLoading(true);

    try {
      const diaChi = pendingFormData.duong && pendingFormData.xa && pendingFormData.thanhPho
        ? `${pendingFormData.duong}, ${pendingFormData.xa}, ${pendingFormData.thanhPho}`
        : "ƒê·ªãa ch·ªâ kh√¥ng x√°c ƒë·ªãnh";

      console.log("Sending update to API with data:", {
        ten: pendingFormData.ten,
        sdt: pendingFormData.sdt,
        email: user?.email,
        ngaySinh: pendingFormData.ngaySinh,
        diaChi,
        role_id: user?.roleId || 3,
        trangThai: 1,
      });

      await accountService.updateAccount(currentUserId, {
        ten: pendingFormData.ten,
        sdt: pendingFormData.sdt,
        email: user?.email,
        ngaySinh: pendingFormData.ngaySinh,
        diaChi,
        role_id: user?.roleId || 3,
        trangThai: 1,
      });

      updateUser({
        ten: pendingFormData.ten,
        sdt: pendingFormData.sdt,
        ngaySinh: pendingFormData.ngaySinh,
        diaChi,
      });

      setIsEditingPersonal(false);

      toast.success("üéâ C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!", {
        description: "Th√¥ng tin c√° nh√¢n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.",
        duration: 4000,
      });

    } catch (error: any) {
      console.error("Update error:", error);
      toast.error("‚ùå C·∫≠p nh·∫≠t th√¥ng tin th·∫•t b·∫°i!", {
        description: error.message || "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t th√¥ng tin. Vui l√≤ng th·ª≠ l·∫°i.",
        duration: 5000,
      });
    } finally {
      setIsLoading(false);
      setPendingFormData(null);
    }
  };

  if (!currentUserId) {
    return (
      <div className="max-w-4xl mx-auto p-6">
        <div className="text-center">
          <h2 className="text-xl font-semibold mb-4">Vui l√≤ng ƒëƒÉng nh·∫≠p</h2>
          <p className="text-gray-600">B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem th√¥ng tin t√†i kho·∫£n</p>
        </div>
      </div>
    );
  }

  // Hi·ªÉn th·ªã form ch·ªânh s·ª≠a
  if (isEditingPersonal) {
    return (
      <div className="max-w-4xl mx-auto">
        <Card className="shadow-sm border bg-white">
          <CardHeader className="pb-4 bg-white">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 bg-orange-100 rounded-full flex items-center justify-center">
                  <User className="w-5 h-5 text-orange-600" />
                </div>
                <div>
                  <CardTitle className="text-xl font-semibold text-black">
                    Ch·ªânh s·ª≠a th√¥ng tin t√†i kho·∫£n
                  </CardTitle>
                  <p className="text-sm text-gray-600 mt-1">
                    C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n c·ªßa b·∫°n
                  </p>
                </div>
              </div>
              <Button
                variant="outline"
                onClick={() => setIsEditingPersonal(false)}
                className="text-black border-gray-300"
              >
                H·ªßy
              </Button>
            </div>
          </CardHeader>
          <Separator />
          <CardContent className="pt-6 bg-white">
            <form onSubmit={handlePersonalSubmit} className="grid grid-cols-2 gap-6">
              <div>
                <Label className="text-sm font-medium text-black mb-2 block">
                  H·ªç t√™n <span className="text-red-500">*</span>
                </Label>
                <Input
                  value={personalData.ten}
                  onChange={(e) => setPersonalData({ ...personalData, ten: e.target.value })}
                  required
                  className="h-11 bg-white border-gray-300 text-black"
                />
              </div>
              <div>
                <Label className="text-sm font-medium text-black mb-2 block">Email</Label>
                <Input
                  type="email"
                  value={personalData.email}
                  disabled={true}
                  className="h-11 bg-gray-100 text-gray-500 border-gray-300"
                />
                <p className="text-xs text-gray-500 mt-1">
                  Email kh√¥ng th·ªÉ thay ƒë·ªïi
                </p>
              </div>
              <div>
                <Label className="text-sm font-medium text-black mb-2 block">S·ªë ƒëi·ªán tho·∫°i</Label>
                <Input
                  value={personalData.sdt}
                  onChange={(e) => {
                    const value = e.target.value;
                    setPersonalData({ ...personalData, sdt: value });
                    const error = validatePhone(value);
                    setErrors((prev) => ({ ...prev, sdt: error }));
                  }}
                  className="h-11 bg-white border-gray-300 text-black"
                />
                {errors.sdt && <p className="text-red-500 text-sm mt-1">{errors.sdt}</p>}
              </div>
              <div>
                <Label className="text-sm font-medium text-black mb-2 block">Ng√†y sinh</Label>
                <Input
                  type="date"
                  value={
                    personalData.ngaySinh && !isNaN(new Date(personalData.ngaySinh).getTime())
                      ? new Date(personalData.ngaySinh).toISOString().split("T")[0]
                      : ""
                  }
                  onChange={(e) => {
                    const value = e.target.value ? new Date(e.target.value) : undefined;
                    setPersonalData({ ...personalData, ngaySinh: value });
                    const error = validateDate(value);
                    setErrors((prev) => ({ ...prev, ngaySinh: error }));
                  }}
                  max={new Date("2025-07-29T23:26:00+07:00").toISOString().split("T")[0]}
                  min="1900-01-01"
                  className="h-11 bg-white border-gray-300 text-black"
                />
                {errors.ngaySinh && <p className="text-red-500 text-sm mt-1">{errors.ngaySinh}</p>}
              </div>
              <div>
                <Label className="text-sm font-medium text-black mb-2 block">T·ªânh/Th√†nh ph·ªë</Label>
                <Select
                  value={selectedProvince}
                  onValueChange={(value) => {
                    setSelectedProvince(value);
                    setErrors((prev) => ({
                      ...prev,
                      thanhPho: value ? "" : "Vui l√≤ng ch·ªçn t·ªânh/th√†nh ph·ªë",
                      xa: prev.xa, // Gi·ªØ l·ªói xa n·∫øu c√≥
                    }));
                  }}
                  className="h-11 bg-white border-gray-300 text-black"
                >
                  <SelectTrigger className="h-11 bg-white border-gray-300 text-black">
                    <SelectValue placeholder="Ch·ªçn t·ªânh/th√†nh ph·ªë" />
                  </SelectTrigger>
                  <SelectContent className="bg-white">
                    {provinces.map((p) => (
                      <SelectItem key={p.code} value={p.code} className="text-black">
                        {p.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {errors.thanhPho && <p className="text-red-500 text-sm mt-1">{errors.thanhPho}</p>}
              </div>
              <div>
                <Label className="text-sm font-medium text-black mb-2 block">X√£/Ph∆∞·ªùng</Label>
                <Select
                  value={selectedWard}
                  onValueChange={(value) => {
                    setSelectedWard(value);
                    setErrors((prev) => ({
                      ...prev,
                      xa: value ? "" : selectedProvince ? "Vui l√≤ng ch·ªçn x√£/ph∆∞·ªùng" : prev.xa,
                    }));
                  }}
                  disabled={!selectedProvince}
                  className="h-11 bg-white border-gray-300 text-black"
                >
                  <SelectTrigger className="h-11 bg-white border-gray-300 text-black">
                    <SelectValue placeholder="Ch·ªçn x√£/ph∆∞·ªùng" />
                  </SelectTrigger>
                  <SelectContent className="bg-white">
                    {wards.map((w) => (
                      <SelectItem key={w.code} value={w.code} className="text-black">
                        {w.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {errors.xa && <p className="text-red-500 text-sm mt-1">{errors.xa}</p>}
              </div>
              <div className="col-span-2">
                <Label className="text-sm font-medium text-black mb-2 block">ƒê·ªãa ch·ªâ</Label>
                <Input
                  value={personalData.duong}
                  onChange={(e) => {
                    const value = e.target.value;
                    setPersonalData({ ...personalData, duong: value });
                    const error = validateAddress(value, "ƒë·ªãa ch·ªâ");
                    setErrors((prev) => ({ ...prev, duong: error }));
                  }}
                  className="h-11 bg-white border-gray-300 text-black"
                  placeholder="Nh·∫≠p s·ªë nh√†, t√™n ƒë∆∞·ªùng..."
                />
                {errors.duong && <p className="text-red-500 text-sm mt-1">{errors.duong}</p>}
              </div>

              <div className="col-span-2 flex gap-3 pt-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setIsEditingPersonal(false)}
                  className="flex-1 text-black border-gray-300"
                >
                  H·ªßy
                </Button>
                <Button
                  type="submit"
                  disabled={isLoading}
                  className="flex-1 bg-blue-600 hover:bg-blue-700 text-white"
                >
                  {isLoading ? "ƒêang l∆∞u..." : "L∆∞u thay ƒë·ªïi"}
                </Button>
              </div>
            </form>
          </CardContent>
        </Card>

        {/* Confirmation Dialog */}
        <AlertDialog open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>X√°c nh·∫≠n c·∫≠p nh·∫≠t th√¥ng tin</AlertDialogTitle>
              <AlertDialogDescription asChild>
                <div>
                  <p className="mb-3">B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën c·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n?</p>
                  <div className="bg-gray-50 p-3 rounded-lg text-sm">
                    <div className="font-medium mb-2">Th√¥ng tin s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t:</div>
                    <div className="space-y-1 text-gray-600">
                      <div>‚Ä¢ <strong>H·ªç t√™n:</strong> {pendingFormData?.ten || "Kh√¥ng c√≥"}</div>
                      <div>‚Ä¢ <strong>S·ªë ƒëi·ªán tho·∫°i:</strong> {pendingFormData?.sdt || "Kh√¥ng c√≥"}</div>
                      <div>‚Ä¢ <strong>Ng√†y sinh:</strong> {pendingFormData?.ngaySinh || "Kh√¥ng c√≥"}</div>
                      <div>‚Ä¢ <strong>ƒê·ªãa ch·ªâ:</strong> {pendingFormData?.duong && pendingFormData?.xa && pendingFormData?.thanhPho
                        ? `${pendingFormData?.duong}, ${pendingFormData?.xa}, ${pendingFormData?.thanhPho}`
                        : "Kh√¥ng c√≥"}</div>
                    </div>
                  </div>
                </div>
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel onClick={() => setPendingFormData(null)}>
                H·ªßy
              </AlertDialogCancel>
              <AlertDialogAction
                onClick={handleConfirmUpdate}
                disabled={isLoading}
                className="bg-blue-600 hover:bg-blue-700"
              >
                {isLoading ? "ƒêang c·∫≠p nh·∫≠t..." : "X√°c nh·∫≠n"}
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      </div>
    );
  }

  // Hi·ªÉn th·ªã th√¥ng tin (view mode)
  return (
    <div className="max-w-4xl mx-auto">
      <Card className="shadow-sm border bg-white">
        <CardHeader className="pb-4 bg-white">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-orange-100 rounded-full flex items-center justify-center">
                <User className="w-5 h-5 text-orange-600" />
              </div>
              <div>
                <CardTitle className="text-xl font-semibold text-black">
                  Th√¥ng tin t√†i kho·∫£n
                </CardTitle>
                <p className="text-sm text-gray-600 mt-1">
                  Qu·∫£n l√Ω th√¥ng tin c√° nh√¢n c·ªßa b·∫°n
                </p>
              </div>
            </div>
            <Button
              onClick={() => setIsEditingPersonal(true)}
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center gap-2"
            >
              <Edit2 className="w-4 h-4" />
              Ch·ªânh s·ª≠a
            </Button>
          </div>
        </CardHeader>
        <Separator />
        <CardContent className="pt-6 bg-white">
          <div className="grid grid-cols-2 gap-8">
            {/* H·ªç v√† t√™n */}
            <div>
              <Label className="text-sm font-medium text-black mb-2 block">
                H·ªç v√† t√™n
              </Label>
              <div className="flex items-center gap-3 p-3 bg-white border border-gray-200 rounded-lg">
                <User className="w-5 h-5 text-gray-500" />
                <span className="text-black font-medium">
                  {user?.ten}
                </span>
              </div>
            </div>

            {/* S·ªë ƒëi·ªán tho·∫°i */}
            <div>
              <Label className="text-sm font-medium text-black mb-2 block">
                S·ªë ƒëi·ªán tho·∫°i
              </Label>
              <div className="flex items-center gap-3 p-3 bg-white border border-gray-200 rounded-lg">
                <Phone className="w-5 h-5 text-gray-500" />
                <span className="text-black font-medium">
                  {user?.sdt || "ch∆∞a c·∫≠p nh·∫≠t"}
                </span>
              </div>
            </div>

            {/* Email */}
            <div>
              <Label className="text-sm font-medium text-black mb-2 block">
                Email
              </Label>
              <div className="flex items-center gap-3 p-3 bg-white border border-gray-200 rounded-lg">
                <Mail className="w-5 h-5 text-gray-500" />
                <span className="text-black font-medium">
                  {user?.email}
                </span>
              </div>
            </div>

            {/* Ng√†y sinh */}
            <div>
              <Label className="text-sm font-medium text-black mb-2 block">
                Ng√†y sinh
              </Label>
              <div className="flex items-center gap-3 p-3 bg-white border border-gray-200 rounded-lg">
                <Calendar className="w-5 h-5 text-gray-500" />
                <span className="text-black font-medium">
                  {user?.ngaySinh
                    ? typeof user.ngaySinh === "string"
                      ? user.ngaySinh
                      : format(new Date(user.ngaySinh), "dd/MM/yyyy")
                    : "Ch∆∞a c·∫≠p nh·∫≠t"}
                </span>
              </div>
            </div>

            {/* ƒê·ªãa ch·ªâ */}
            <div className="col-span-2">
              <Label className="text-sm font-medium text-black mb-2 block">
                ƒê·ªãa ch·ªâ
              </Label>
              <div className="flex items-start gap-3 p-3 bg-white border border-gray-200 rounded-lg">
                <MapPin className="w-5 h-5 text-gray-500 mt-0.5" />
                <span className="text-black font-medium">
                  {user.diaChi || "Ch∆∞a c·∫≠p nh·∫≠t"}
                </span>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}