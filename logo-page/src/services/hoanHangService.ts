import { PhieuHoanHang, PhieuHoanHangDTO, TrangThaiPhieuHoan, TrangThaiThanhToan } from "@/components/types/hoanHang-types";
import { fetchWithAuth } from "./fetchWithAuth";



const API_URL = "http://localhost:8080/api/lego-store/hoan-hang";

// Function test API endpoint
async function testApiEndpoint() {
    try {
        const token = localStorage.getItem("access_token");
        if (!token) {
            console.log("‚ùå No token for test");
            return false;
        }

        console.log("üß™ Testing API endpoint...");
        const testRes = await fetch("http://localhost:8080/api/lego-store/hoan-hang/trang-thai/CHO_DUYET", {
            method: "GET",
            headers: {
                "Authorization": `Bearer ${token}`,
                "Content-Type": "application/json",
            },
        });

        console.log("üß™ Test response status:", testRes.status);
        if (testRes.ok) {
            console.log("‚úÖ API endpoint accessible");
            return true;
        } else {
            console.log("‚ùå API endpoint not accessible");
            return false;
        }
    } catch (error) {
        console.error("‚ùå Test API error:", error);
        return false;
    }
}

export const hoanHangService = {

    async taophieu(dto: PhieuHoanHangDTO): Promise<PhieuHoanHang> {
        const res = await fetchWithAuth(`${API_URL}/tao-phieu`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(dto),
        })
        if (!res.ok) {
            let message = "Kh√¥ng th·ªÉ t·∫°o phi·∫øu ho√†n h√†ng";
            try {
                const errorData = await res.json();
                message = errorData.message || JSON.stringify(errorData);
            } catch {
                message = await res.text();
            }
            throw new Error(message);
        }
        return res.json();
    },

    // Duy·ªát phi·∫øu ho√†n h√†ng
    async duyet(id: number): Promise<string> {
        console.log(`üîÑ Duy·ªát phi·∫øu ho√†n h√†ng ID: ${id}`);

        // Debug: Ki·ªÉm tra token tr∆∞·ªõc khi g·ª≠i
        const token = localStorage.getItem("access_token");
        if (!token) {
            throw new Error("Kh√¥ng t√¨m th·∫•y token, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i");
        }

        try {
            const payload = JSON.parse(atob(token.split('.')[1]));
            console.log("üîë Token payload:", payload);
            console.log("‚è∞ Token exp:", new Date(payload.exp * 1000));
            console.log("üë§ User role:", payload.role || payload.roles || payload.authorities);
        } catch (error) {
            console.error("‚ùå L·ªói khi parse token:", error);
        }

        // Test API endpoint tr∆∞·ªõc
        const canAccess = await testApiEndpoint();
        if (!canAccess) {
            throw new Error("Kh√¥ng th·ªÉ truy c·∫≠p API, vui l√≤ng ki·ªÉm tra token v√† quy·ªÅn");
        }

        const res = await fetchWithAuth(`${API_URL}/${id}/duyet`, {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            },
        });

        console.log(`Response status cho duyet: ${res.status}`);

        if (!res.ok) {
            let message = "Kh√¥ng th·ªÉ duy·ªát phi·∫øu ho√†n h√†ng";
            try {
                const errorData = await res.json();
                message = errorData.message || errorData.error || JSON.stringify(errorData);
                console.error("Error data t·ª´ duyet:", errorData);
            } catch {
                const textError = await res.text();
                message = textError || message;
                console.error("Text error t·ª´ duyet:", textError);
            }
            throw new Error(message);
        }

        // S·ª≠a ·ªü ƒë√¢y: l·∫•y message t·ª´ object tr·∫£ v·ªÅ
        const data = await res.json();
        console.log("Success data t·ª´ duyet:", data);
        return data.message || "Duy·ªát phi·∫øu ho√†n h√†ng th√†nh c√¥ng";
    },

    // T·ª´ ch·ªëi phi·∫øu ho√†n h√†ng
    async tuChoi(id: number, lyDo: string): Promise<string> {
        console.log(`T·ª´ ch·ªëi phi·∫øu ho√†n h√†ng ID: ${id}, L√Ω do: ${lyDo}`);

        const url = `${API_URL}/${id}/tu-choi?lyDo=${encodeURIComponent(lyDo)}`;

        const res = await fetchWithAuth(url, {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            },
        });

        console.log(`Response status cho tuChoi: ${res.status}`);

        if (!res.ok) {
            let message = "Kh√¥ng th·ªÉ t·ª´ ch·ªëi phi·∫øu ho√†n h√†ng";
            try {
                const errorData = await res.json();
                message = errorData.message || errorData.error || JSON.stringify(errorData);
                console.error("Error data t·ª´ tuChoi:", errorData);
            } catch {
                const textError = await res.text();
                message = textError || message;
                console.error("Text error t·ª´ tuChoi:", textError);
            }
            throw new Error(message);
        }

        // S·ª≠a ·ªü ƒë√¢y: l·∫•y message t·ª´ object tr·∫£ v·ªÅ
        const data = await res.json();
        console.log("Success data t·ª´ tuChoi:", data);
        return data.message || "T·ª´ ch·ªëi phi·∫øu ho√†n h√†ng th√†nh c√¥ng";
    },

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n
    async capNhatThanhToan(
        id: number,
        trangThai: TrangThaiThanhToan
    ): Promise<string> {
        console.log(`C·∫≠p nh·∫≠t thanh to√°n phi·∫øu ho√†n h√†ng ID: ${id}, Tr·∫°ng th√°i: ${trangThai}`);

        const url = `${API_URL}/${id}/thanh-toan?trangThai=${trangThai}`;

        const res = await fetchWithAuth(url, {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            },
        });

        console.log(`Response status cho capNhatThanhToan: ${res.status}`);

        if (!res.ok) {
            let message = "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n";
            try {
                const errorData = await res.json();
                message = errorData.message || errorData.error || JSON.stringify(errorData);
                console.error("Error data t·ª´ capNhatThanhToan:", errorData);
            } catch {
                const textError = await res.text();
                message = textError || message;
                console.error("Text error t·ª´ capNhatThanhToan:", textError);
            }
            throw new Error(message);
        }

        // S·ª≠a ·ªü ƒë√¢y: l·∫•y message t·ª´ object tr·∫£ v·ªÅ
        const data = await res.json();
        console.log("Success data t·ª´ capNhatThanhToan:", data);
        return data.message || "C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n th√†nh c√¥ng";
    },

    // L·∫•y danh s√°ch phi·∫øu ho√†n h√†ng theo tr·∫°ng th√°i
    async getByTrangThai(
        trangThai: TrangThaiPhieuHoan
    ): Promise<PhieuHoanHang[]> {
        const res = await fetchWithAuth(`${API_URL}/trang-thai/${trangThai}`, {
            cache: "no-store",
        });

        if (!res.ok) throw new Error("Kh√¥ng th·ªÉ l·∫•y danh s√°ch phi·∫øu ho√†n h√†ng");

        return res.json();
    },

    // L·∫•y phi·∫øu ho√†n h√†ng theo h√≥a ƒë∆°n
    async getByHoaDon(idHoaDon: number): Promise<PhieuHoanHang[]> {
        const res = await fetchWithAuth(`${API_URL}/hoa-don/${idHoaDon}`, {
            cache: "no-store",
        });

        if (!res.ok) throw new Error("Kh√¥ng th·ªÉ l·∫•y phi·∫øu ho√†n h√†ng theo h√≥a ƒë∆°n");

        return res.json();
    },

    // Ki·ªÉm tra c√≥ th·ªÉ ho√†n h√†ng hay kh√¥ng
    async kiemTraCoTheHoanHang(
        idHoaDon: number
    ): Promise<{ coTheHoanHang: boolean }> {
        const res = await fetchWithAuth(`${API_URL}/kiem-tra/${idHoaDon}`);

        if (!res.ok) throw new Error("Kh√¥ng th·ªÉ ki·ªÉm tra ho√†n h√†ng");

        return res.json();
    },

    // T·∫°o phi·∫øu ho√†n h√†ng c√≥ file ·∫£nh v√† video
    async taoPhieu2(
        dto: PhieuHoanHangDTO,
        fileAnh: File[], // ho·∫∑c: FileList
        fileVid?: File
    ): Promise<any> {
        // N·∫øu kh√¥ng c√≥ file, s·ª≠ d·ª•ng endpoint ƒë∆°n gi·∫£n
        if ((!fileAnh || fileAnh.length === 0) && !fileVid) {
            console.log("Kh√¥ng c√≥ file, s·ª≠ d·ª•ng endpoint tao-phieu");
            return this.taophieu(dto);
        }

        const formData = new FormData();

        // Th√™m c√°c tr∆∞·ªùng c·ªßa dto v√†o formData
        Object.entries(dto).forEach(([key, value]) => {
            if (Array.isArray(value)) {
                // N·∫øu l√† chiTietHoanHangs (array object)
                value.forEach((item, idx) => {
                    Object.entries(item).forEach(([k, v]) => {
                        formData.append(`chiTietHoanHangs[${idx}].${k}`, v as any);
                    });
                });
            } else if (value !== undefined && value !== null) {
                formData.append(key, value as any);
            }
        });

        // Th√™m file ·∫£nh (nhi·ªÅu file)
        if (fileAnh && fileAnh.length > 0) {
            fileAnh.forEach((file) => {
                formData.append("fileAnh", file);
            });
        }

        // Th√™m file video (n·∫øu c√≥)
        if (fileVid) {
            formData.append("fileVid", fileVid);
        }

        console.log("G·ª≠i request v·ªõi FormData ƒë·∫øn tao-phieu-2");
        const res = await fetchWithAuth(`${API_URL}/tao-phieu-2`, {
            method: "POST",
            body: formData,
        });

        if (!res.ok) {
            let message = "Kh√¥ng th·ªÉ t·∫°o phi·∫øu ho√†n h√†ng (c√≥ file)";
            try {
                const errorData = await res.json();
                message = errorData.message || JSON.stringify(errorData);
            } catch {
                message = await res.text();
            }
            throw new Error(message);
        }

        return res.json();
    },

};


